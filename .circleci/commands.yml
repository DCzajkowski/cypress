commands:
  verify_should_persist_artifacts:
    steps:
      - run:
          name: Check current branch to persist artifacts
          command: |
            if [[ "$CIRCLE_BRANCH" != "develop" && "$CIRCLE_BRANCH" != "ryanm/fix/typescript-issue" ]]; then
              echo "Not uploading artifacts or posting install comment for this branch."
              circleci-agent step halt
            fi

  restore_workspace_binaries:
    steps:
      - attach_workspace:
          at: ~/
      # make sure we have cypress.zip received
      - run: ls -l
      - run: ls -l cypress.zip cypress.tgz
      - run: node --version
      - run: npm --version

  restore_cached_workspace:
    steps:
      - attach_workspace:
          at: ~/
      - install-required-node
      - unpack-dependencies

  restore_cached_binary:
    steps:
      - attach_workspace:
          at: ~/

  prepare-modules-cache:
    parameters:
      dont-move:
        type: boolean
        default: false
    steps:
      - run: node scripts/circle-cache.js --action prepare
      - unless:
          condition: << parameters.dont-move >>
          steps:
            - run:
                name: Move to /tmp dir for consistent caching across root/non-root users
                command: |
                  mkdir -p /tmp/node_modules_cache
                  mv ~/cypress/node_modules /tmp/node_modules_cache/root_node_modules
                  mv ~/cypress/cli/node_modules /tmp/node_modules_cache/cli_node_modules
                  mv ~/cypress/system-tests/node_modules /tmp/node_modules_cache/system-tests_node_modules
                  mv ~/cypress/globbed_node_modules /tmp/node_modules_cache/globbed_node_modules

  install-webkit-deps:
    steps:
      - run:
          name: Install WebKit dependencies
          command: |
            npx playwright install webkit
            npx playwright install-deps webkit

  build-and-persist:
    description: Save entire folder as artifact for other jobs to run without reinstalling
    steps:
      - run:
          name: Build all codegen
          command: |
            source ./scripts/ensure-node.sh
            yarn gulp buildProd
      - run:
          name: Build packages
          command: |
            source ./scripts/ensure-node.sh
            yarn build
      - run:
          name: Generate v8 snapshot
          command: |
            source ./scripts/ensure-node.sh
            yarn build-v8-snapshot-prod
      - prepare-modules-cache # So we don't throw these in the workspace cache
      - persist_to_workspace:
          root: ~/
          paths:
            - cypress
            - .ssh
            - node_modules # contains the npm i -g modules

  install_cache_helpers_dependencies:
    steps:
      - run:
          # Dependencies needed by circle-cache.js, before we "yarn" or unpack cached node_modules
          name: Cache Helper Dependencies
          working_directory: ~/
          command: npm i glob@7.1.6 fs-extra@10.0.0 minimist@1.2.5 fast-json-stable-stringify@2.1.0

  unpack-dependencies:
    description: 'Unpacks dependencies associated with the current workflow'
    steps:
      - install_cache_helpers_dependencies
      - run:
          name: Generate Circle Cache Key
          command: node scripts/circle-cache.js --action cacheKey > circle_cache_key
      - run:
          name: Generate platform key
          command: node ./scripts/get-platform-key.js > platform_key
      - restore_cache:
          name: Restore cache state, to check for known modules cache existence
          key: v{{ checksum ".circleci/cache-version.txt" }}-{{ checksum "platform_key" }}-node-modules-cache-{{ checksum "circle_cache_key" }}
      - run:
          name: Move node_modules back from /tmp
          command: |
            if [[ -d "/tmp/node_modules_cache" ]]; then
              mv /tmp/node_modules_cache/root_node_modules ~/cypress/node_modules
              mv /tmp/node_modules_cache/cli_node_modules ~/cypress/cli/node_modules
              mv /tmp/node_modules_cache/system-tests_node_modules ~/cypress/system-tests/node_modules
              mv /tmp/node_modules_cache/globbed_node_modules ~/cypress/globbed_node_modules
              rm -rf /tmp/node_modules_cache
            fi
      - run:
          name: Restore all node_modules to proper workspace folders
          command: node scripts/circle-cache.js --action unpack

  restore_cached_system_tests_deps:
    description: 'Restore the cached node_modules for projects in "system-tests/projects/**"'
    steps:
      - run:
          name: Generate Circle Cache key for system tests
          command: ./system-tests/scripts/cache-key.sh > system_tests_cache_key
      - run:
          name: Generate platform key
          command: node ./scripts/get-platform-key.js > platform_key
      - restore_cache:
          name: Restore system tests node_modules cache
          keys:
            - v{{ checksum ".circleci/cache-version.txt" }}-{{ checksum "platform_key" }}-system-tests-projects-node-modules-cache-{{ checksum "system_tests_cache_key" }}

  update_cached_system_tests_deps:
    description: 'Update the cached node_modules for projects in "system-tests/projects/**"'
    steps:
      - run:
          name: Generate Circle Cache key for system tests
          command: ./system-tests/scripts/cache-key.sh > system_tests_cache_key
      - run:
          name: Generate platform key
          command: node ./scripts/get-platform-key.js > platform_key
      - restore_cache:
          name: Restore cache state, to check for known modules cache existence
          keys:
            - v{{ checksum ".circleci/cache-version.txt" }}-{{ checksum "platform_key" }}-state-of-system-tests-projects-node-modules-cache-{{ checksum "system_tests_cache_key" }}
      - run:
          name: Send root honeycomb event for this CI build
          command: cd system-tests/scripts && node ./send-root-honeycomb-event.js
      - run:
          name: Bail if specific cache exists
          command: |
            if [[ -f "/tmp/system_tests_node_modules_installed" ]]; then
              echo "No updates to system tests node modules, exiting"
              circleci-agent step halt
            fi
      - restore_cache:
          name: Restore system tests node_modules cache
          keys:
            - v{{ checksum ".circleci/cache-version.txt" }}-{{ checksum "platform_key" }}-system-tests-projects-node-modules-cache-{{ checksum "system_tests_cache_key" }}
            - v{{ checksum ".circleci/cache-version.txt" }}-{{ checksum "platform_key" }}-system-tests-projects-node-modules-cache-
      - run:
          name: Update system-tests node_modules cache
          command: yarn workspace @tooling/system-tests projects:yarn:install
      - save_cache:
          name: Save system tests node_modules cache
          key: v{{ checksum ".circleci/cache-version.txt" }}-{{ checksum "platform_key" }}-system-tests-projects-node-modules-cache-{{ checksum "system_tests_cache_key" }}
          paths:
            - /tmp/cy-system-tests-node-modules
      - run: touch /tmp/system_tests_node_modules_installed
      - save_cache:
          name: Save system tests node_modules cache state key
          key: v{{ checksum ".circleci/cache-version.txt" }}-{{ checksum "platform_key" }}-state-of-system-tests-projects-node-modules-cache-{{ checksum "system_tests_cache_key" }}
          paths:
            - /tmp/system_tests_node_modules_installed

  caching-dependency-installer:
    description: 'Installs & caches the dependencies based on yarn lock & package json dependencies'
    parameters:
      only-cache-for-root-user:
        type: boolean
        default: false
    steps:
      - install_cache_helpers_dependencies
      - run:
          name: Generate Circle Cache Key
          command: node scripts/circle-cache.js --action cacheKey > circle_cache_key
      - run:
          name: Generate platform key
          command: node ./scripts/get-platform-key.js > platform_key
      - restore_cache:
          name: Restore cache state, to check for known modules cache existence
          key: v{{ checksum ".circleci/cache-version.txt" }}-{{ checksum "platform_key" }}-state-of-node-modules-cache-{{ checksum "circle_cache_key" }}
      - run:
          name: Bail if cache exists
          command: |
            if [[ -f "node_modules_installed" ]]; then
              echo "Node modules already cached for dependencies, exiting"
              circleci-agent step halt
            fi
      - run: date +%Y-%U > cache_date
      - restore_cache:
          name: Restore weekly yarn cache
          keys:
            - v{{ checksum ".circleci/cache-version.txt" }}-{{ checksum "platform_key" }}-deps-root-weekly-{{ checksum "cache_date" }}
      - run:
          name: Install Node Modules
          command: |
            source ./scripts/ensure-node.sh
            # avoid installing Percy's Chromium every time we use @percy/cli
            # https://docs.percy.io/docs/caching-asset-discovery-browser-in-ci
            PERCY_POSTINSTALL_BROWSER=true \
            yarn --prefer-offline --frozen-lockfile --cache-folder ~/.yarn
          no_output_timeout: 20m
      - prepare-modules-cache:
          dont-move: <<parameters.only-cache-for-root-user>> # we don't move, so we don't hit any issues unpacking symlinks
      - when:
          condition: <<parameters.only-cache-for-root-user>> # we don't move to /tmp since we don't need to worry about different users
          steps:
            - save_cache:
                name: Saving node modules for root, cli, and all globbed workspace packages
                key: v{{ checksum ".circleci/cache-version.txt" }}-{{ checksum "platform_key" }}-node-modules-cache-{{ checksum "circle_cache_key" }}
                paths:
                  - node_modules
                  - cli/node_modules
                  - system-tests/node_modules
                  - globbed_node_modules
      - unless:
          condition: <<parameters.only-cache-for-root-user>>
          steps:
            - save_cache:
                name: Saving node modules for root, cli, and all globbed workspace packages
                key: v{{ checksum ".circleci/cache-version.txt" }}-{{ checksum "platform_key" }}-node-modules-cache-{{ checksum "circle_cache_key" }}
                paths:
                  - /tmp/node_modules_cache
      - run: touch node_modules_installed
      - save_cache:
          name: Saving node-modules cache state key
          key: v{{ checksum ".circleci/cache-version.txt" }}-{{ checksum "platform_key" }}-state-of-node-modules-cache-{{ checksum "circle_cache_key" }}
          paths:
            - node_modules_installed
      - save_cache:
          name: Save weekly yarn cache
          key: v{{ checksum ".circleci/cache-version.txt" }}-{{ checksum "platform_key" }}-deps-root-weekly-{{ checksum "cache_date" }}
          paths:
            - ~/.yarn
            - ~/.cy-npm-cache

  verify-build-setup:
    description: Common commands run when setting up for build or yarn install
    parameters:
      executor:
        type: executor
        default: cy-doc
    steps:
      - run: pwd
      - run:
          name: print global yarn cache path
          command: echo $(yarn global bin)
      - run:
          name: print yarn version
          command: yarn versions
      - unless:
          condition:
            # stop-only does not correctly match on windows: https://github.com/bahmutov/stop-only/issues/78
            equal: [ *windows-executor, << parameters.executor >> ]
          steps:
            - run:
                name: Stop .only
                 # this will catch ".only"s in js/coffee as well
                command: |
                  source ./scripts/ensure-node.sh
                  yarn stop-only-all
      - run:
          name: Check terminal variables
          ## make sure the TERM is set to 'xterm' in node (Linux only)
          ## else colors (and tests) will fail
          ## See the following information
          ##   * http://andykdocs.de/development/Docker/Fixing+the+Docker+TERM+variable+issue
          ##   * https://unix.stackexchange.com/questions/43945/whats-the-difference-between-various-term-variables
          command: |
            source ./scripts/ensure-node.sh
            yarn check-terminal

  install-required-node:
    # https://discuss.circleci.com/t/switch-nodejs-version-on-machine-executor-solved/26675/2
    description: Install Node version matching .node-version
    steps:
      # installing NVM will use git+ssh, so update known_hosts
      - update_known_hosts
      - run:
          name: Install Node
          command: |
            node_version=$(cat .node-version)
            source ./scripts/ensure-node.sh
            echo "Installing Yarn"
            npm install yarn -g # ensure yarn is installed with the correct node engine
            yarn check-node-version
      - run:
          name: Check Node
          command: |
            source ./scripts/ensure-node.sh
            yarn check-node-version

  install-chrome:
    description: Install Google Chrome
    parameters:
      channel:
        description: browser channel to install
        type: string
      version:
        description: browser version to install
        type: string
    steps:
      - run:
          name: Install Google Chrome (<<parameters.channel>>)
          command: |
            echo "Installing Chrome (<<parameters.channel>>) v<<parameters.version>>"
            wget -O /usr/src/google-chrome-<<parameters.channel>>_<<parameters.version>>_amd64.deb "http://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-<<parameters.channel>>/google-chrome-<<parameters.channel>>_<<parameters.version>>-1_amd64.deb" && \
            dpkg -i /usr/src/google-chrome-<<parameters.channel>>_<<parameters.version>>_amd64.deb ; \
            apt-get install -f -y && \
            rm -f /usr/src/google-chrome-<<parameters.channel>>_<<parameters.version>>_amd64.deb
            which google-chrome-<<parameters.channel>> || (printf "\n\033[0;31mChrome was not successfully downloaded - bailing\033[0m\n\n" && exit 1)
            echo "Location of Google Chrome Installation: `which google-chrome-<<parameters.channel>>`"
            echo "Google Chrome Version: `google-chrome-<<parameters.channel>> --version`"

  run-driver-integration-tests:
    parameters:
      browser:
        description: browser shortname to target
        type: string
      install-chrome-channel:
        description: chrome channel to install
        type: string
        default: ''
      experimentalSessionAndOrigin:
        description: experimental flag to apply
        type: boolean
        default: false
    steps:
      - restore_cached_workspace
      - when:
          condition: <<parameters.install-chrome-channel>>
          steps:
            - install-chrome:
                channel: <<parameters.install-chrome-channel>>
                version: $(node ./scripts/get-browser-version.js chrome:<<parameters.install-chrome-channel>>)
      - when:
          condition:
            equal: [ webkit, << parameters.browser >> ]
          steps:
            - install-webkit-deps
      - run:
          name: Run driver tests in Cypress
          environment:
            CYPRESS_CONFIG_ENV: production
          command: |
            echo Current working directory is $PWD
            echo Total containers $CIRCLE_NODE_TOTAL

            if [[ -v MAIN_RECORD_KEY ]]; then
              # internal PR
              if <<parameters.experimentalSessionAndOrigin>>; then
                CYPRESS_RECORD_KEY=$MAIN_RECORD_KEY \
                yarn cypress:run-experimentalSessionAndOrigin --record --parallel --group 5x-driver-<<parameters.browser>>-experimentalSessionAndOrigin --browser <<parameters.browser>>
              else
                CYPRESS_RECORD_KEY=$MAIN_RECORD_KEY \
                yarn cypress:run --record --parallel --group 5x-driver-<<parameters.browser>> --browser <<parameters.browser>>
              fi
            else
              # external PR
              TESTFILES=$(circleci tests glob "cypress/e2e/**/*.cy.*" | circleci tests split --total=$CIRCLE_NODE_TOTAL)
              echo "Test files for this machine are $TESTFILES"

              if [[ -z "$TESTFILES" ]]; then
                echo "Empty list of test files"
              fi
              if <<parameters.experimentalSessionAndOrigin>>; then
                yarn cypress:run-experimentalSessionAndOrigin --browser <<parameters.browser>> --spec $TESTFILES
              else
                yarn cypress:run --browser <<parameters.browser>> --spec $TESTFILES
              fi
            fi
          working_directory: packages/driver
      - verify-mocha-results
      - store_test_results:
          path: /tmp/cypress
      - store_artifacts:
          path: /tmp/artifacts
      - store-npm-logs

  windows-install-chrome:
    parameters:
      browser:
        description: browser shortname to target
        type: string
    steps:
      - run:
          # TODO: How can we have preinstalled browsers on CircleCI?
          name: 'Install Chrome on Windows'
          command: |
            # install with `--ignore-checksums` to avoid checksum error
            # https://www.gep13.co.uk/blog/chocolatey-error-hashes-do-not-match
            [[ $PLATFORM == 'windows' && '<<parameters.browser>>' == 'chrome' ]] && choco install googlechrome --ignore-checksums || [[ $PLATFORM != 'windows' ]]

  run-new-ui-tests:
    parameters:
      package:
        description: package to target
        type: enum
        enum: ['frontend-shared', 'launchpad', 'app', 'reporter']
      browser:
        description: browser shortname to target
        type: string
      percy:
        description: enable percy
        type: boolean
        default: false
      type:
        description: ct or e2e
        type: enum
        enum: ['ct', 'e2e']
      debug:
        description: debug option
        type: string
        default: ''
    steps:
      - restore_cached_workspace
      - windows-install-chrome:
          browser: <<parameters.browser>>
      - run:
          command: |
            echo Current working directory is $PWD
            echo Total containers $CIRCLE_NODE_TOTAL

            if [[ -v MAIN_RECORD_KEY ]]; then
              # internal PR
              cmd=$([[ <<parameters.percy>> == 'true' ]] && echo 'yarn percy exec --parallel -- --') || true
              DEBUG=<<parameters.debug>> \
              CYPRESS_CONFIG_ENV=production \
              CYPRESS_RECORD_KEY=$MAIN_RECORD_KEY \
              PERCY_PARALLEL_NONCE=$CIRCLE_WORKFLOW_WORKSPACE_ID \
              PERCY_ENABLE=${PERCY_TOKEN:-0} \
              PERCY_PARALLEL_TOTAL=-1 \
              $cmd yarn workspace @packages/<<parameters.package>> cypress:run:<<parameters.type>> --browser <<parameters.browser>> --record --parallel --group <<parameters.package>>-<<parameters.type>>
            else
              # external PR

              # To make `circleci tests` work correctly, we need to step into the package folder.
              cd packages/<<parameters.package>>

              GLOB="cypress/e2e/**/*cy.*"

              if [[ <<parameters.type>> == 'ct' ]]; then
                # component tests are located side by side with the source codes.
                GLOB="src/**/*cy.*"
              fi

              TESTFILES=$(circleci tests glob "$GLOB" | circleci tests split --total=$CIRCLE_NODE_TOTAL)
              echo "Test files for this machine are $TESTFILES"

              # To run the `yarn` command, we need to walk out of the package folder.
              cd ../..

              DEBUG=<<parameters.debug>> \
              CYPRESS_CONFIG_ENV=production \
              PERCY_PARALLEL_NONCE=$CIRCLE_WORKFLOW_WORKSPACE_ID \
              PERCY_ENABLE=${PERCY_TOKEN:-0} \
              PERCY_PARALLEL_TOTAL=-1 \
              yarn workspace @packages/<<parameters.package>> cypress:run:<<parameters.type>> --browser <<parameters.browser>> --spec $TESTFILES
            fi
      - run:
          command: |
            if [[ <<parameters.package>> == 'app' && <<parameters.percy>> == 'true' && -d "packages/app/cypress/screenshots/runner/screenshot/screenshot.cy.tsx/percy" ]]; then
              PERCY_PARALLEL_NONCE=$CIRCLE_WORKFLOW_WORKSPACE_ID \
              PERCY_ENABLE=${PERCY_TOKEN:-0} \
              PERCY_PARALLEL_TOTAL=-1 \
              yarn percy upload packages/app/cypress/screenshots/runner/screenshot/screenshot.cy.tsx/percy
            else
              echo "skipping percy screenshots uploading"
            fi
      - store_test_results:
          path: /tmp/cypress
      - store_artifacts:
          path: ./packages/<<parameters.package>>/cypress/videos
      - store-npm-logs

  run-system-tests:
    parameters:
      browser:
        description: browser shortname to target
        type: string
    steps:
      - restore_cached_workspace
      - restore_cached_system_tests_deps
      - when:
          condition:
            equal: [ webkit, << parameters.browser >> ]
          steps:
            - install-webkit-deps
      - run:
          name: Run system tests
          command: |
            ALL_SPECS=`circleci tests glob "/root/cypress/system-tests/test/*spec*"`
            SPECS=
            for file in $ALL_SPECS; do
              # filter out non_root tests, they have their own stage
              if [[ "$file" == *"non_root"* ]]; then
                echo "Skipping $file"
                continue
              fi
              SPECS="$SPECS $file"
            done
            SPECS=`echo $SPECS | xargs -n 1 | circleci tests split --split-by=timings`
            echo SPECS=$SPECS
            yarn workspace @tooling/system-tests test:ci $SPECS --browser <<parameters.browser>>
      - verify-mocha-results
      - store_test_results:
          path: /tmp/cypress
      - store_artifacts:
          path: /tmp/artifacts
      - store-npm-logs

  run-binary-system-tests:
    steps:
      - restore_cached_workspace
      - restore_cached_system_tests_deps
      - run:
          name: Run system tests
          command: |
            ALL_SPECS=`circleci tests glob "$HOME/cypress/system-tests/test-binary/*spec*"`
            SPECS=`echo $ALL_SPECS | xargs -n 1 | circleci tests split --split-by=timings`
            echo SPECS=$SPECS
            yarn workspace @tooling/system-tests test:ci $SPECS
      - verify-mocha-results
      - store_test_results:
          path: /tmp/cypress
      - store_artifacts:
          path: /tmp/artifacts
      - store-npm-logs

  store-npm-logs:
    description: Saves any NPM debug logs as artifacts in case there is a problem
    steps:
      - store_artifacts:
          path: ~/.npm/_logs

  post-install-comment:
    description: Post GitHub comment with a blurb on how to install pre-release version
    steps:
      - run:
          name: Post pre-release install comment
          command: |
            node scripts/add-install-comment.js \
              --npm npm-package-url.json \
              --binary binary-url.json

  verify-mocha-results:
    description: Double-check that Mocha tests ran as expected.
    parameters:
      expectedResultCount:
        description: The number of result files to expect, ie, the number of Mocha test suites that ran.
        type: integer
        ## by default, assert that at least 1 test ran
        default: 0
    steps:
      - run:
          name: 'Verify Mocha Results'
          command: |
            source ./scripts/ensure-node.sh
            yarn verify:mocha:results <<parameters.expectedResultCount>>

  clone-repo-and-checkout-branch:
    description: |
      Clones an external repo and then checks out the branch that matches the next version otherwise uses 'master' branch.
    parameters:
      repo:
        description: "Name of the github repo to clone like: cypress-example-kitchensink"
        type: string
      pull_request_id:
        description: Pull request number to check out before installing and testing
        type: integer
        default: 0
    steps:
      - restore_cached_binary
      - run:
          name: "Cloning test project and checking out release branch: <<parameters.repo>>"
          working_directory: /tmp/<<parameters.repo>>
          command: |
            git clone --depth 1 --no-single-branch https://github.com/cypress-io/<<parameters.repo>>.git .

            cd ~/cypress/..
            # install some deps for get-next-version
            npm i semver@7.3.2 conventional-recommended-bump@6.1.0 conventional-changelog-angular@5.0.12
            NEXT_VERSION=$(node ./cypress/scripts/get-next-version.js)
            cd -

            git checkout $NEXT_VERSION || true
      - when:
          condition: <<parameters.pull_request_id>>
          steps:
            - run:
                name: Check out PR <<parameters.pull_request_id>>
                working_directory: /tmp/<<parameters.repo>>
                command: |
                  git fetch origin pull/<<parameters.pull_request_id>>/head:pr-<<parameters.pull_request_id>>
                  git checkout pr-<<parameters.pull_request_id>>

  test-binary-against-rwa:
    description: |
      Takes the built binary and NPM package, clones the RWA repo
      and runs the new version of Cypress against it.
    parameters:
      repo:
        description: "Name of the github repo to clone like"
        type: string
        default: "cypress-realworld-app"
      browser:
        description: Name of the browser to use, like "electron", "chrome", "firefox"
        type: enum
        enum: ["", "electron", "chrome", "firefox"]
        default: ""
      command:
        description: Test command to run to start Cypress tests
        type: string
        default: "yarn cypress:run"
      # if the repo to clone and test is a monorepo, you can
      # run tests inside a specific subfolder
      folder:
        description: Subfolder to test in
        type: string
        default: ""
      # you can test new features in the test runner against recipes or other repos
      # by opening a pull request in those repos and running this test job
      # against a pull request number in the example repo
      pull_request_id:
        description: Pull request number to check out before installing and testing
        type: integer
        default: 0
      wait-on:
        description: Whether to use wait-on to wait on a server to be booted
        type: string
        default: ""
      server-start-command:
        description: Server start command for repo
        type: string
        default: "CI=true yarn start"
    steps:
      - clone-repo-and-checkout-branch:
          repo: <<parameters.repo>>
      - when:
          condition: <<parameters.pull_request_id>>
          steps:
            - run:
                name: Check out PR <<parameters.pull_request_id>>
                working_directory: /tmp/<<parameters.repo>>
                command: |
                  git fetch origin pull/<<parameters.pull_request_id>>/head:pr-<<parameters.pull_request_id>>
                  git checkout pr-<<parameters.pull_request_id>>
                  git log -n 2
      - run:
          command: yarn
          working_directory: /tmp/<<parameters.repo>>
      - run:
          name: Install Cypress
          working_directory: /tmp/<<parameters.repo>>
          # force installing the freshly built binary
          command: |
            CYPRESS_INSTALL_BINARY=~/cypress/cypress.zip npm i --legacy-peer-deps ~/cypress/cypress.tgz && [[ -f yarn.lock ]] && yarn
      - run:
          name: Print Cypress version
          working_directory: /tmp/<<parameters.repo>>
          command: npx cypress version
      - run:
          name: Types check 🧩 (maybe)
          working_directory: /tmp/<<parameters.repo>>
          command: yarn types
      - run:
          working_directory: /tmp/<<parameters.repo>>
          command: <<parameters.server-start-command>>
          background: true
      - run:
          condition: <<parameters.wait-on>>
          name: "Waiting on server to boot: <<parameters.wait-on>>"
          command: "npx wait-on <<parameters.wait-on>>"
      - when:
          condition: <<parameters.folder>>
          steps:
            - when:
                condition: <<parameters.browser>>
                steps:
                  - run:
                      name: Run tests using browser "<<parameters.browser>>"
                      working_directory: /tmp/<<parameters.repo>>/<<parameters.folder>>
                      command: |
                        <<parameters.command>> -- --browser <<parameters.browser>>
            - unless:
                condition: <<parameters.browser>>
                steps:
                  - run:
                      name: Run tests using command
                      working_directory: /tmp/<<parameters.repo>>/<<parameters.folder>>
                      command: <<parameters.command>>
      - unless:
          condition: <<parameters.folder>>
          steps:
            - when:
                condition: <<parameters.browser>>
                steps:
                  - run:
                      name: Run tests using browser "<<parameters.browser>>"
                      working_directory: /tmp/<<parameters.repo>>
                      command: <<parameters.command>> -- --browser <<parameters.browser>>
            - unless:
                condition: <<parameters.browser>>
                steps:
                  - run:
                      name: Run tests using command
                      working_directory: /tmp/<<parameters.repo>>
                      command: <<parameters.command>>
      - store-npm-logs

  test-binary-against-repo:
    description: |
      Takes the built binary and NPM package, clones given example repo
      and runs the new version of Cypress against it.
    parameters:
      repo:
        description: "Name of the github repo to clone like: cypress-example-kitchensink"
        type: string
      browser:
        description: Name of the browser to use, like "electron", "chrome", "firefox"
        type: enum
        enum: ["", "electron", "chrome", "firefox"]
        default: ""
      command:
        description: Test command to run to start Cypress tests
        type: string
        default: "npm run e2e"
      build-project:
        description: Should the project build script be executed
        type: boolean
        default: true
      # if the repo to clone and test is a monorepo, you can
      # run tests inside a specific subfolder
      folder:
        description: Subfolder to test in
        type: string
        default: ""
      # you can test new features in the test runner against recipes or other repos
      # by opening a pull request in those repos and running this test job
      # against a pull request number in the example repo
      pull_request_id:
        description: Pull request number to check out before installing and testing
        type: integer
        default: 0
      wait-on:
        description: Whether to use wait-on to wait on a server to be booted
        type: string
        default: ""
      server-start-command:
        description: Server start command for repo
        type: string
        default: "npm start --if-present"
    steps:
      - clone-repo-and-checkout-branch:
          repo: <<parameters.repo>>
          pull_request_id: <<parameters.pull_request_id>>
      - run:
          # Ensure we're installing the node-version for the cloned repo
          command: |
            if [[ -f .node-version ]]; then
              branch="<< pipeline.git.branch >>"

              externalBranchPattern='^pull\/[0-9]+'
              if [[ $branch =~ $externalBranchPattern ]]; then
                # We are unable to curl from the external PR branch location
                # so we fall back to develop
                branch="develop"
              fi

              curl -L https://raw.githubusercontent.com/cypress-io/cypress/$branch/scripts/ensure-node.sh --output ci-ensure-node.sh
            else
              # if no .node-version file exists, we no-op the node script and use the global yarn
              echo '' > ci-ensure-node.sh
            fi
          working_directory: /tmp/<<parameters.repo>>
      - run:
          # Install deps + Cypress binary with yarn if yarn.lock present
          command: |
            source ./ci-ensure-node.sh
            if [[ -f yarn.lock ]]; then
              yarn --frozen-lockfile
              CYPRESS_INSTALL_BINARY=~/cypress/cypress.zip yarn add -D ~/cypress/cypress.tgz
            else
              npm install
              CYPRESS_INSTALL_BINARY=~/cypress/cypress.zip npm install --legacy-peer-deps ~/cypress/cypress.tgz
            fi
          working_directory: /tmp/<<parameters.repo>>
      - run:
          name: Scaffold new config file
          working_directory: /tmp/<<parameters.repo>>
          environment:
            CYPRESS_INTERNAL_FORCE_SCAFFOLD: "1"
          command: |
            if [[ -f cypress.json ]]; then
              rm -rf cypress.json
              echo 'module.exports = { e2e: {} }' > cypress.config.js
            fi
      - run:
          name: Rename support file
          working_directory: /tmp/<<parameters.repo>>
          command: |
            if [[ -f cypress/support/index.js ]]; then
              mv cypress/support/index.js cypress/support/e2e.js
            fi
      - run:
          name: Print Cypress version
          working_directory: /tmp/<<parameters.repo>>
          command: |
            source ./ci-ensure-node.sh
            npx cypress version
      - run:
          name: Types check 🧩 (maybe)
          working_directory: /tmp/<<parameters.repo>>
          command: |
            source ./ci-ensure-node.sh
            [[ -f yarn.lock ]] && yarn types || npm run types --if-present
      - when:
          condition: <<parameters.build-project>>
          steps:
          - run:
              name: Build 🏗 (maybe)
              working_directory: /tmp/<<parameters.repo>>
              command: |
                source ./ci-ensure-node.sh
                [[ -f yarn.lock ]] && yarn build || npm run build --if-present
      - run:
          working_directory: /tmp/<<parameters.repo>>
          command: |
            source ./ci-ensure-node.sh
            <<parameters.server-start-command>>
          background: true
      - run:
          condition: <<parameters.wait-on>>
          name: "Waiting on server to boot: <<parameters.wait-on>>"
          command: |
            npx wait-on <<parameters.wait-on>> --timeout 120000
      - windows-install-chrome:
          browser: <<parameters.browser>>
      - when:
          condition: <<parameters.folder>>
          steps:
            - when:
                condition: <<parameters.browser>>
                steps:
                  - run:
                      name: Run tests using browser "<<parameters.browser>>"
                      working_directory: /tmp/<<parameters.repo>>/<<parameters.folder>>
                      command: |
                        <<parameters.command>> -- --browser <<parameters.browser>>
            - unless:
                condition: <<parameters.browser>>
                steps:
                  - run:
                      name: Run tests using command
                      working_directory: /tmp/<<parameters.repo>>/<<parameters.folder>>
                      command: <<parameters.command>>
      - unless:
          condition: <<parameters.folder>>
          steps:
            - when:
                condition: <<parameters.browser>>
                steps:
                  - run:
                      name: Run tests using browser "<<parameters.browser>>"
                      working_directory: /tmp/<<parameters.repo>>
                      command: |
                        source ./ci-ensure-node.sh
                        <<parameters.command>> -- --browser <<parameters.browser>>
            - unless:
                condition: <<parameters.browser>>
                steps:
                  - run:
                      name: Run tests using command
                      working_directory: /tmp/<<parameters.repo>>
                      command: |
                        source ./ci-ensure-node.sh
                        <<parameters.command>>
      - store-npm-logs

  wait-on-circle-jobs:
    description: Polls certain Circle CI jobs until they finish
    parameters:
      job-names:
        description: comma separated list of circle ci job names to wait for
        type: string
    steps:
      - run:
          name: "Waiting on Circle CI jobs: <<parameters.job-names>>"
          command: node ./scripts/wait-on-circle-jobs.js --job-names="<<parameters.job-names>>"

  build-binary:
    steps:
      - run:
          name: Check environment variables before code sign (if on Mac/Windows)
          # NOTE
          # our code sign works via electron-builder
          # by default, electron-builder will NOT sign app built in a pull request
          # even our internal one (!)
          # Usually this is not a problem, since we only build and test binary
          # built on the "develop" branch
          # but if you need to really build and sign a binary in a PR
          # set variable CSC_FOR_PULL_REQUEST=true
          command: |
            set -e
            NEEDS_CODE_SIGNING=`node -p 'process.platform === "win32" || process.platform === "darwin"'`
            if [[ "$NEEDS_CODE_SIGNING" == "true" ]]; then
              echo "Checking for required environment variables..."
              if [ -z "$CSC_LINK" ]; then
                echo "Need to provide environment variable CSC_LINK"
                echo "with base64 encoded certificate .p12 file"
                exit 1
              fi
              if [ -z "$CSC_KEY_PASSWORD" ]; then
                echo "Need to provide environment variable CSC_KEY_PASSWORD"
                echo "with password for unlocking certificate .p12 file"
                exit 1
              fi
              echo "Succeeded."
            else
              echo "Not code signing for this platform"
            fi
      - run:
          name: Build the Cypress binary
          environment:
            DEBUG: electron-builder,electron-osx-sign*
          # notarization on Mac can take a while
          no_output_timeout: "45m"
          command: |
            source ./scripts/ensure-node.sh
            node --version
            if [[ `node ./scripts/get-platform-key.js` == 'linux-arm64' ]]; then
              # these are missing on Circle and there is no way to pre-install them on Arm
              sudo apt-get update
              sudo apt-get install -y libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
              DISABLE_SNAPSHOT_REQUIRE=1 yarn binary-build --version $(node ./scripts/get-next-version.js)
            else
              yarn binary-build --version $(node ./scripts/get-next-version.js)
            fi
      - run:
          name: Zip the binary
          command: |
            if [[ $PLATFORM == 'linux' ]]; then
              # on Arm, CI runs as non-root, on x64 CI runs as root but there is no sudo binary
              if [[ `whoami` == 'root' ]]; then
                apt-get update && apt-get install -y zip
              else
                sudo apt-get update && sudo apt-get install -y zip
              fi
            fi
            source ./scripts/ensure-node.sh
            yarn binary-zip
      - store-npm-logs
      - persist_to_workspace:
          root: ~/
          paths:
            - cypress/cypress.zip

  build-cypress-npm-package:
    parameters:
      executor:
        type: executor
        default: cy-doc
    steps:
      - run:
          name: Bump NPM version
          command: |
            source ./scripts/ensure-node.sh
            yarn get-next-version --npm
      - run:
          name: Build NPM package
          command: |
            source ./scripts/ensure-node.sh
            yarn build --scope cypress
      - run:
          name: Copy Re-exported NPM Packages
          command: node ./scripts/post-build.js
          working_directory: cli
      - run:
          command: ls -la types
          working_directory: cli/build
      - run:
          command: ls -la vue vue2 mount-utils react
          working_directory: cli/build
      - unless:
          condition:
            equal: [ *windows-executor, << parameters.executor >> ]
          steps:
            - run:
                name: list NPM package contents
                command: |
                  source ./scripts/ensure-node.sh
                  yarn workspace cypress size
      - run:
          name: pack NPM package
          working_directory: cli/build
          command: yarn pack --filename ../../cypress.tgz
      - run:
          name: list created NPM package
          command: ls -l
      - store-npm-logs
      - persist_to_workspace:
          root: ~/
          paths:
            - cypress/cypress.tgz

  upload-build-artifacts:
    steps:
      - run: ls -l
      - run:
          name: Upload unique binary to S3
          command: |
            node scripts/binary.js upload-build-artifact \
              --type binary \
              --file cypress.zip \
              --version $(node -p "require('./package.json').version")
      - run:
          name: Upload NPM package to S3
          command: |
            node scripts/binary.js upload-build-artifact \
              --type npm-package \
              --file cypress.tgz \
              --version $(node -p "require('./package.json').version")
      - store-npm-logs
      - run: ls -l
      - run: cat binary-url.json
      - run: cat npm-package-url.json
      - persist_to_workspace:
          root: ~/
          paths:
            - cypress/binary-url.json
            - cypress/npm-package-url.json

  update_known_hosts:
    description: Ensures that we have the latest Git public keys to prevent git+ssh from failing.
    steps:
    - run:
        name: Update known_hosts with github.com keys
        command: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
