version: 2.1
setup: true

orbs:
  go: circleci/go@1.6.0
  continuation: circleci/continuation@0.1.0

jobs:
  verify-ci-should-run:
    docker:
      - image: cimg/golang:latest
    steps:
      - checkout
      - run:
          name: Verify CI should run
          command: |
            # run CI when manually triggers via CircleCi Dashboard
            if [ <<pipeline.trigger_source>> == 'api' ]; then
              echo "Always run CI when manually triggered from the UI."
              exit 0
            fi

            if [[ "$CIRCLE_BRANCH" == "develop" || "$CIRCLE_BRANCH" == "release/"* ]]; then
              echo "Always run CI for develop and for release candidate branches."
              exit 0
            fi


            cancel_build () {
              echo "Canceling the CI build..."
              curl --request POST \
                --url https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/cancel \
                --header "Circle-Token: ${CIRCLE_TOKEN}"
              sleep 30  # Give cancellation a chance to run. This script then won't continue running.
              exit 1  # If cancellation didn't run for some reason, fail the build.
            }

            TRIGGER_INSTRUCTIONS="to trigger CI , include 'run ci' in the commit message or click the 'Trigger Pipeline' button in the CircleCI UI."

            if [ -v "${CIRCLE_PULL_REQUEST##*/}" ]; then
              # Since we're piggybacking off of an existing OAuth var, tweak the var for our uses ?? are we.
              token=$(echo "${GITHUB_TOKEN}" | cut -d':' -f1)

              headers="Authorization: token $token"
              api_endpoint="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${CIRCLE_PULL_REQUEST##*/}"

              # Fetch PR metadata from Github's API and parse fields from json
              github_res=$(curl --silent --header "${headers}" "${api_endpoint}" | jq '{draft: .draft}')
              draft=$(echo "${github_res}" | jq '.draft')

              if [[ "${draft}" == true ]]; then
                echo "Skipping CI; PR is in draft - $TRIGGER_INSTRUCTIONS"
                cancel_build
              fi

              echo "Always run CI for PR that is ready for review."
              exit 0
            fi

            LAST_LOG=$(git log -1 --grep="run ci" --pretty=%B)
            echo "$LAST_LOG"
            if [ -z "$LAST_LOG" ]; then
              echo "Skipping CI; branch in progress - $TRIGGER_INSTRUCTIONS"
              cancel_build
            fi

            echo "Always run CI when the commit message includes 'run ci'."
      - continuation/continue:
          # configuration_path: .circleci/continue_config.yml
          configuration_path: .circleci/pipelines.yml

workflows:
  # the always-run workflow is always triggered, regardless of the pipeline parameters.
  setup-workflow:
    jobs:
      - verify-ci-should-run:
          context: workflow-setup