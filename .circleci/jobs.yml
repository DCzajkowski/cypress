jobs:
  ## Checks if we already have a valid cache for the node_modules_install and if it has,
  ## skips ahead to the build step, otherwise installs and caches the node_modules
  node_modules_install:
    <<: *defaults
    parameters:
      <<: *defaultsParameters
      resource_class:
        type: string
        default: medium
    resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - install-required-node
      - verify-build-setup:
          executor: << parameters.executor >>
      - persist_to_workspace:
          root: ~/
          paths:
            - cypress
            - .nvm # mac / linux
            - ProgramData/nvm # windows
      - caching-dependency-installer:
          only-cache-for-root-user: <<parameters.only-cache-for-root-user>>
      - store-npm-logs

  ## restores node_modules from previous step & builds if first step skipped
  build:
    <<: *defaults
    parameters:
      <<: *defaultsParameters
      resource_class:
        type: string
        default: large
    resource_class: << parameters.resource_class >>
    steps:
      - restore_cached_workspace
      - run:
          name: Top level packages
          command: yarn list --depth=0 || true
      - run:
          name: Check env canaries on Linux
          command: |
            # only Docker has the required env data for this
            if [[ $CI_DOCKER == 'true' ]]; then
              node ./scripts/circle-env.js --check-canaries
            fi
      - build-and-persist
      - store-npm-logs

  lint:
    <<: *defaults
    steps:
      - restore_cached_workspace
      - run:
          name: Linting 🧹
          command: |
            yarn clean
            git clean -df
            yarn lint
      - run:
          name: cypress info (dev)
          command: node cli/bin/cypress info --dev
      - store-npm-logs

  check-ts:
    <<: *defaults
    steps:
      - restore_cached_workspace
      - install-required-node
      - run:
          name: Check TS Types
          command: NODE_OPTIONS=--max_old_space_size=4096 yarn gulp checkTs


  # a special job that keeps polling Circle and when all
  # individual jobs are finished, it closes the Percy build
  percy-finalize:
    <<: *defaults
    resource_class: small
    parameters:
      <<: *defaultsParameters
      required_env_var:
        type: env_var_name
    steps:
      - restore_cached_workspace
      - run:
          # if this is an external pull request, the environment variables
          # are NOT set for security reasons, thus no need to poll -
          # and no need to finalize Percy, since there will be no visual tests
          name: Check if <<parameters.required_env_var>> is set
          command: |
            if [[ -v <<parameters.required_env_var>> ]]; then
              echo "Internal PR, good to go"
            else
              echo "This is an external PR, cannot access other services"
              circleci-agent step halt
            fi
      - wait-on-circle-jobs:
          job-names: >
            cli-visual-tests,
            reporter-integration-tests,
            run-app-component-tests-chrome,
            run-app-integration-tests-chrome,
            run-frontend-shared-component-tests-chrome,
            run-launchpad-component-tests-chrome,
            run-launchpad-integration-tests-chrome,
            run-reporter-component-tests-chrome,
            run-webpack-dev-server-integration-tests,
            run-vite-dev-server-integration-tests
      - run:
          # Sometimes, even though all the circle jobs have finished, Percy times out during `build:finalize`
          # If all other jobs finish but `build:finalize` fails, we retry it once
          name: Finalize percy build - allows single retry
          command: |
            PERCY_PARALLEL_NONCE=$CIRCLE_WORKFLOW_WORKSPACE_ID \
            yarn percy build:finalize || yarn percy build:finalize

  cli-visual-tests:
    <<: *defaults
    resource_class: small
    steps:
      - restore_cached_workspace
      - run: mkdir -p cli/visual-snapshots
      - run:
          command: node cli/bin/cypress info --dev | yarn --silent term-to-html | node scripts/sanitize --type cli-info > cli/visual-snapshots/cypress-info.html
          environment:
            FORCE_COLOR: 2
      - run:
          command: node cli/bin/cypress help | yarn --silent term-to-html > cli/visual-snapshots/cypress-help.html
          environment:
            FORCE_COLOR: 2
      - store_artifacts:
          path: cli/visual-snapshots
      - run:
          name: Upload CLI snapshots for diffing
          command: |
            PERCY_PARALLEL_NONCE=$CIRCLE_WORKFLOW_WORKSPACE_ID \
            PERCY_ENABLE=${PERCY_TOKEN:-0} \
            PERCY_PARALLEL_TOTAL=-1 \
            yarn percy snapshot ./cli/visual-snapshots

  v8-integration-tests:
    <<: *defaults
    parameters:
      <<: *defaultsParameters
      resource_class:
        type: string
        default: medium
    resource_class: << parameters.resource_class >>
    parallelism: 1
    steps:
      - restore_cached_workspace
      - restore_cached_system_tests_deps
      # TODO: Remove this once we switch off self-hosted M1 runners
      - when:
          condition:
            equal: [ *darwin-arm64-executor, << parameters.executor >> ]
          steps:
            - run: rm -f /tmp/cypress/junit/* 
      - unless:
          condition:
            or:
              - equal: [ *linux-arm64-executor, << parameters.executor >> ] # TODO: Figure out how to support linux-arm64 when we get to linux arm64 build: https://github.com/cypress-io/cypress/issues/23557
          steps:
            - run:
                name: Run v8 integration tests
                command: |
                  source ./scripts/ensure-node.sh
                  yarn test-integration --scope "'@tooling/{packherd,v8-snapshot,electron-mksnapshot}'"
            - verify-mocha-results:
                expectedResultCount: 3
      - when:
          condition:
            or:
              - equal: [ *linux-arm64-executor, << parameters.executor >> ]
          steps:
            - run:
                name: Run v8 integration tests
                command: |
                  source ./scripts/ensure-node.sh
                  yarn test-integration --scope "'@tooling/packherd'"
            - verify-mocha-results:
                expectedResultCount: 1
      - store_test_results:
          path: /tmp/cypress
      - store-npm-logs

  unit-tests:
    <<: *defaults
    parameters:
      <<: *defaultsParameters
      resource_class:
        type: string
        default: medium
    resource_class: << parameters.resource_class >>
    parallelism: 1
    steps:
      - restore_cached_workspace
      - when:
          condition:
            # several snapshots fails for windows due to paths.
            # until these are fixed, run the tests that are working.
            equal: [ *windows-executor, << parameters.executor >> ]
          steps:
            - run: yarn test-unit:scripts scripts/**/*spec.js
      - unless:
          condition:
            equal: [ *windows-executor, << parameters.executor >> ]
          steps:
            # make sure packages with TypeScript can be transpiled to JS
            - run: yarn lerna run build-prod --stream --concurrency 4
            # run unit tests from each individual package
            - run: yarn test-unit --ignore @packages/server
            # run type checking for each individual package
            - run: yarn lerna run types
            - verify-mocha-results:
                expectedResultCount: 18
      - store_test_results:
          path: /tmp/cypress
      # CLI tests generate HTML files with sample CLI command output
      - store_artifacts:
          path: cli/test/html
      - store_artifacts:
          path: packages/errors/__snapshot-images__
      - store-npm-logs

  unit-tests-release:
    <<: *defaults
    resource_class: small
    parallelism: 1
    steps:
      - restore_cached_workspace
      - update_known_hosts
      - run: yarn test-npm-package-release-script

  lint-types:
    <<: *defaults
    parallelism: 1
    steps:
      - restore_cached_workspace
      - run:
          command: ls -la types
          working_directory: cli
      - run:
          command: ls -la chai
          working_directory: cli/types
      - run:
          name: "Lint types 🧹"
          command: yarn workspace cypress dtslint
      - store-npm-logs

  server-unit-tests:
    <<: *defaults
    parallelism: 1
    steps:
      - restore_cached_workspace
      - run: yarn workspace @packages/server test-unit
      - verify-mocha-results:
          expectedResultCount: 1
      - store_test_results:
          path: /tmp/cypress
      - store-npm-logs

  server-integration-tests:
    <<: *defaults
    parallelism: 1
    steps:
      - restore_cached_workspace
      - run: yarn test-integration --scope @packages/server
      - verify-mocha-results:
          expectedResultCount: 1
      - store_test_results:
          path: /tmp/cypress
      - store-npm-logs

  server-performance-tests:
    <<: *defaults
    steps:
      - restore_cached_workspace
      - run:
          command: yarn workspace @packages/server test-performance
      - verify-mocha-results:
          expectedResultCount: 1
      - store_test_results:
          path: /tmp/cypress
      - store_artifacts:
          path: /tmp/artifacts
      - store-npm-logs

  system-tests-node-modules-install:
    <<: *defaults
    steps:
      - restore_cached_workspace
      - update_cached_system_tests_deps

  binary-system-tests:
    parallelism: 2
    working_directory: ~/cypress
    environment:
      <<: *defaultsEnvironment
      PLATFORM: linux
    machine:
      # using `machine` gives us a Linux VM that can run Docker
      image: ubuntu-2004:202111-02
      docker_layer_caching: true
    resource_class: medium
    steps:
      - run-binary-system-tests

  system-tests-chrome:
    <<: *defaults
    parallelism: 8
    steps:
      - run-system-tests:
          browser: chrome

  system-tests-electron:
    <<: *defaults
    parallelism: 8
    steps:
      - run-system-tests:
          browser: electron

  system-tests-firefox:
    <<: *defaults
    parallelism: 8
    steps:
      - run-system-tests:
          browser: firefox

  system-tests-webkit:
    <<: *defaults
    parallelism: 8
    steps:
      - run-system-tests:
          browser: webkit

  system-tests-non-root:
    <<: *defaults
    steps:
      - restore_cached_workspace
      - run:
          command: yarn workspace @tooling/system-tests test:ci "test/non_root*spec*" --browser electron
      - verify-mocha-results
      - store_test_results:
          path: /tmp/cypress
      - store_artifacts:
          path: /tmp/artifacts
      - store-npm-logs

  run-frontend-shared-component-tests-chrome:
    <<: *defaults
    parameters:
      <<: *defaultsParameters
      percy:
        type: boolean
        default: false
    parallelism: 3
    steps:
      - run-new-ui-tests:
          browser: chrome
          percy: << parameters.percy >>
          package: frontend-shared
          type: ct

  run-launchpad-component-tests-chrome:
    <<: *defaults
    parameters:
      <<: *defaultsParameters
      percy:
        type: boolean
        default: false
    parallelism: 7
    steps:
      - run-new-ui-tests:
          browser: chrome
          percy: << parameters.percy >>
          package: launchpad
          type: ct
          # debug: cypress:*,engine:socket

  run-launchpad-integration-tests-chrome:
    <<: *defaults
    parameters:
      <<: *defaultsParameters
      resource_class:
        type: string
        default: medium
      percy:
        type: boolean
        default: false
    resource_class: << parameters.resource_class >>
    parallelism: 3
    steps:
      - run-new-ui-tests:
          browser: chrome
          percy: << parameters.percy >>
          package: launchpad
          type: e2e

  run-app-component-tests-chrome:
    <<: *defaults
    parameters:
      <<: *defaultsParameters
      percy:
        type: boolean
        default: false
    parallelism: 7
    steps:
      - run-new-ui-tests:
          browser: chrome
          percy: << parameters.percy >>
          package: app
          type: ct

  run-app-integration-tests-chrome:
    <<: *defaults
    parameters:
      <<: *defaultsParameters
      resource_class:
        type: string
        default: medium
      percy:
        type: boolean
        default: false
    resource_class: << parameters.resource_class >>
    parallelism: 8
    steps:
      - run-new-ui-tests:
          browser: chrome
          percy: << parameters.percy >>
          package: app
          type: e2e

  driver-integration-tests-chrome:
    <<: *defaults
    parallelism: 5
    steps:
      - run-driver-integration-tests:
          browser: chrome
          install-chrome-channel: stable

  driver-integration-tests-chrome-beta:
    <<: *defaults
    parallelism: 5
    steps:
      - run-driver-integration-tests:
          browser: chrome:beta
          install-chrome-channel: beta

  driver-integration-tests-firefox:
    <<: *defaults
    parallelism: 5
    steps:
      - run-driver-integration-tests:
          browser: firefox

  driver-integration-tests-electron:
    <<: *defaults
    parallelism: 5
    steps:
      - run-driver-integration-tests:
          browser: electron

  driver-integration-tests-webkit:
    <<: *defaults
    parallelism: 5
    steps:
      - run-driver-integration-tests:
          browser: webkit

  driver-integration-tests-chrome-experimentalSessionAndOrigin:
    <<: *defaults
    resource_class: medium
    parallelism: 5
    steps:
      - run-driver-integration-tests:
          browser: chrome
          install-chrome-channel: stable
          experimentalSessionAndOrigin: true

  driver-integration-tests-chrome-beta-experimentalSessionAndOrigin:
    <<: *defaults
    resource_class: medium
    parallelism: 5
    steps:
      - run-driver-integration-tests:
          browser: chrome:beta
          install-chrome-channel: beta
          experimentalSessionAndOrigin: true

  driver-integration-tests-firefox-experimentalSessionAndOrigin:
    <<: *defaults
    resource_class: medium
    parallelism: 5
    steps:
      - run-driver-integration-tests:
          browser: firefox
          experimentalSessionAndOrigin: true

  driver-integration-tests-electron-experimentalSessionAndOrigin:
    <<: *defaults
    resource_class: medium
    parallelism: 5
    steps:
      - run-driver-integration-tests:
          browser: electron
          experimentalSessionAndOrigin: true

  driver-integration-tests-webkit-experimentalSessionAndOrigin:
    <<: *defaults
    resource_class: medium
    parallelism: 5
    steps:
      - run-driver-integration-tests:
          browser: webkit
          experimentalSessionAndOrigin: true

  run-reporter-component-tests-chrome:
    <<: *defaults
    parameters:
      <<: *defaultsParameters
      percy:
        type: boolean
        default: false
    parallelism: 2
    steps:
      - run-new-ui-tests:
          browser: chrome
          percy: << parameters.percy >>
          package: reporter
          type: ct

  reporter-integration-tests:
    <<: *defaults
    parallelism: 3
    steps:
      - restore_cached_workspace
      - run:
          command: yarn build-for-tests
          working_directory: packages/reporter
      - run:
          command: |
            CYPRESS_CONFIG_ENV=production \
            CYPRESS_RECORD_KEY=$MAIN_RECORD_KEY \
            PERCY_PARALLEL_NONCE=$CIRCLE_WORKFLOW_WORKSPACE_ID \
            PERCY_ENABLE=${PERCY_TOKEN:-0} \
            PERCY_PARALLEL_TOTAL=-1 \
            yarn percy exec --parallel -- -- \
            yarn cypress:run --record --parallel --group reporter
          working_directory: packages/reporter
      - verify-mocha-results
      - store_test_results:
          path: /tmp/cypress
      - store_artifacts:
          path: /tmp/artifacts
      - store-npm-logs

  run-webpack-dev-server-integration-tests:
    <<: *defaults
    parallelism: 2
    steps:
      - restore_cached_workspace
      - restore_cached_system_tests_deps
      - run:
          command: |
            CYPRESS_CONFIG_ENV=production \
            CYPRESS_RECORD_KEY=$MAIN_RECORD_KEY \
            PERCY_PARALLEL_NONCE=$CIRCLE_WORKFLOW_WORKSPACE_ID \
            PERCY_ENABLE=${PERCY_TOKEN:-0} \
            PERCY_PARALLEL_TOTAL=-1 \
            yarn percy exec --parallel -- -- \
            yarn cypress:run --record --parallel --group webpack-dev-server
          working_directory: npm/webpack-dev-server
      - store_test_results:
          path: /tmp/cypress
      - store_artifacts:
          path: /tmp/artifacts
      - store-npm-logs

  run-vite-dev-server-integration-tests:
    <<: *defaults
    # parallelism: 3 TODO: Add parallelism once we have more specs
    steps:
      - restore_cached_workspace
      - restore_cached_system_tests_deps
      - run:
          command: |
            CYPRESS_CONFIG_ENV=production \
            CYPRESS_RECORD_KEY=$MAIN_RECORD_KEY \
            PERCY_PARALLEL_NONCE=$CIRCLE_WORKFLOW_WORKSPACE_ID \
            PERCY_ENABLE=${PERCY_TOKEN:-0} \
            PERCY_PARALLEL_TOTAL=-1 \
            yarn percy exec --parallel -- -- \
            yarn cypress:run --record --parallel --group vite-dev-server
          working_directory: npm/vite-dev-server
      - store_test_results:
          path: /tmp/cypress
      - store_artifacts:
          path: /tmp/artifacts
      - store-npm-logs

  npm-webpack-preprocessor:
    <<: *defaults
    steps:
      - restore_cached_workspace
      - run:
          name: Build
          command: yarn workspace @cypress/webpack-preprocessor build
      - run:
          name: Test babelrc
          command: yarn test
          working_directory: npm/webpack-preprocessor/examples/use-babelrc
      - run:
          name: Build ts-loader
          command: yarn install
          working_directory: npm/webpack-preprocessor/examples/use-ts-loader
      - run:
          name: Types ts-loader
          command: yarn types
          working_directory: npm/webpack-preprocessor/examples/use-ts-loader
      - run:
          name: Test ts-loader
          command: yarn test
          working_directory: npm/webpack-preprocessor/examples/use-ts-loader
      - run:
          name: Start React app
          command: yarn start
          background: true
          working_directory: npm/webpack-preprocessor/examples/react-app
      - run:
          name: Test React app
          command: yarn test
          working_directory: npm/webpack-preprocessor/examples/react-app
      - run:
          name: Run tests
          command: yarn workspace @cypress/webpack-preprocessor test
      - store-npm-logs

  npm-webpack-dev-server:
    <<: *defaults
    steps:
      - restore_cached_workspace
      - restore_cached_system_tests_deps
      - run:
          name: Run tests
          command: yarn workspace @cypress/webpack-dev-server test
      - run:
          name: Run tests
          command: yarn workspace @cypress/webpack-dev-server test

  npm-vite-dev-server:
    <<: *defaults
    steps:
      - restore_cached_workspace
      - run:
          name: Run tests
          command: yarn test
          working_directory: npm/vite-dev-server
      - store_test_results:
          path: npm/vite-dev-server/test_results
      - store-npm-logs

  npm-webpack-batteries-included-preprocessor:
    <<: *defaults
    resource_class: small
    steps:
      - restore_cached_workspace
      - run:
          name: Run tests
          command: yarn workspace @cypress/webpack-batteries-included-preprocessor test

  npm-vue:
    <<: *defaults
    steps:
      - restore_cached_workspace
      - run:
          name: Build
          command: yarn workspace @cypress/vue build
      - run:
          name: Type Check
          command: yarn typecheck
          working_directory: npm/vue
      - store_test_results:
          path: npm/vue/test_results
      - store_artifacts:
          path: npm/vue/test_results
      - store-npm-logs

  npm-angular:
    <<: *defaults
    steps:
      - restore_cached_workspace
      - run:
          name: Build
          command: yarn workspace @cypress/angular build
      - store-npm-logs

  npm-react:
    <<: *defaults
    steps:
      - restore_cached_workspace
      - run:
          name: Build
          command: yarn workspace @cypress/react build
      - run:
          name: Run tests
          command: yarn test
          working_directory: npm/react
      - store_test_results:
          path: npm/react/test_results
      - store_artifacts:
          path: npm/react/test_results
      - store-npm-logs

  npm-mount-utils:
    <<: *defaults
    steps:
      - restore_cached_workspace
      - run:
          name: Build
          command: yarn workspace @cypress/mount-utils build
      - store-npm-logs

  npm-xpath:
    <<: *defaults
    resource_class: small
    steps:
      - restore_cached_workspace
      - run:
          name: Run tests
          command: yarn workspace @cypress/xpath cy:run
      - store_test_results:
          path: npm/xpath/test_results
      - store_artifacts:
          path: npm/xpath/test_results
      - store-npm-logs

  npm-grep:
    <<: *defaults
    resource_class: small
    steps:
      - restore_cached_workspace
      - run:
          name: Run tests
          command: yarn workspace @cypress/grep cy:run
      - store_test_results:
          path: npm/grep/test_results
      - store_artifacts:
          path: npm/grep/test_results
      - store-npm-logs

  npm-create-cypress-tests:
    <<: *defaults
    resource_class: small
    steps:
      - restore_cached_workspace
      - run: yarn workspace create-cypress-tests build

  npm-eslint-plugin-dev:
    <<: *defaults
    steps:
      - restore_cached_workspace
      - run:
          name: Run tests
          command: yarn workspace @cypress/eslint-plugin-dev test

  npm-cypress-schematic:
    <<: *defaults
    steps:
      - restore_cached_workspace
      - run:
          name: Build + Install
          command: |
            yarn workspace @cypress/schematic build
          working_directory: npm/cypress-schematic
      - run:
          name: Run unit tests
          command: |
            yarn test
          working_directory: npm/cypress-schematic
      - store-npm-logs

  npm-release:
    <<: *defaults
    resource_class: medium+
    steps:
      - restore_cached_workspace
      - run:
          name: Release packages after all jobs pass
          command: yarn npm-release

  create-build-artifacts:
    <<: *defaults
    parameters:
      <<: *defaultsParameters
      resource_class:
        type: string
        default: large
    resource_class: << parameters.resource_class >>
    steps:
      - restore_cached_workspace
      - build-binary
      - build-cypress-npm-package:
          executor: << parameters.executor >>
      - verify_should_persist_artifacts
      - upload-build-artifacts
      - post-install-comment

  test-kitchensink:
    <<: *defaults
    parameters:
      <<: *defaultsParameters
      resource_class:
        type: string
        default: medium+
    steps:
      - restore_cached_workspace
      - clone-repo-and-checkout-branch:
          repo: cypress-example-kitchensink
      - install-required-node
      - run:
          name: Remove cypress.json
          description: Remove cypress.json in case it exists
          working_directory: /tmp/cypress-example-kitchensink
          environment:
            CYPRESS_INTERNAL_FORCE_SCAFFOLD: "1"
          command: rm -rf cypress.json
      - run:
          name: Install prod dependencies
          command: yarn --production
          working_directory: /tmp/cypress-example-kitchensink
      - run:
          name: Example server
          command: yarn start
          working_directory: /tmp/cypress-example-kitchensink
          background: true
      - run:
          name: Rename support file
          working_directory: /tmp/cypress-example-kitchensink
          command: |
            if [[ -f cypress/support/index.js ]]; then
              mv cypress/support/index.js cypress/support/e2e.js
            fi
      - run:
          name: Run Kitchensink example project
          command: |
            yarn cypress:run --project /tmp/cypress-example-kitchensink
      - store-npm-logs

  test-kitchensink-against-staging:
    <<: *defaults
    steps:
      - restore_cached_workspace
      - clone-repo-and-checkout-branch:
          repo: cypress-example-kitchensink
      - install-required-node
      - run:
          name: Install prod dependencies
          command: yarn --production
          working_directory: /tmp/cypress-example-kitchensink
      - run:
          name: Example server
          command: yarn start
          working_directory: /tmp/cypress-example-kitchensink
          background: true
      - run:
          name: Run Kitchensink example project
          command: |
            CYPRESS_PROJECT_ID=$TEST_KITCHENSINK_PROJECT_ID \
            CYPRESS_RECORD_KEY=$TEST_KITCHENSINK_RECORD_KEY \
            CYPRESS_INTERNAL_ENV=staging \
            CYPRESS_video=false \
            yarn cypress:run --project /tmp/cypress-example-kitchensink --record
      - store-npm-logs

  test-against-staging:
    <<: *defaults
    steps:
      - restore_cached_workspace
      - clone-repo-and-checkout-branch:
          repo: cypress-test-tiny
      - run:
          name: Run test project
          command: |
            CYPRESS_PROJECT_ID=$TEST_TINY_PROJECT_ID \
            CYPRESS_RECORD_KEY=$TEST_TINY_RECORD_KEY \
            CYPRESS_INTERNAL_ENV=staging \
            yarn cypress:run --project /tmp/cypress-test-tiny --record
      - store-npm-logs

  test-npm-module-and-verify-binary:
    <<: *defaults
    steps:
      - restore_cached_workspace
      # make sure we have cypress.zip received
      - run: ls -l
      - run: ls -l cypress.zip cypress.tgz
      - run: mkdir test-binary
      - run:
          name: Create new NPM package
          working_directory: test-binary
          command: npm init -y
      - run:
          # install NPM from built NPM package folder
          name: Install Cypress
          working_directory: test-binary
          # force installing the freshly built binary
          command: CYPRESS_INSTALL_BINARY=/root/cypress/cypress.zip npm i /root/cypress/cypress.tgz
      - run:
          name: Cypress version
          working_directory: test-binary
          command: $(yarn bin cypress) version
      - run:
          name: Verify Cypress binary
          working_directory: test-binary
          command: $(yarn bin cypress) verify
      - run:
          name: Cypress help
          working_directory: test-binary
          command: $(yarn bin cypress) help
      - run:
          name: Cypress info
          working_directory: test-binary
          command: $(yarn bin cypress) info
      - store-npm-logs

  test-npm-module-on-minimum-node-version:
    <<: *defaults
    resource_class: small
    docker:
      - image: cypress/base:12.0.0-libgbm
    steps:
      - restore_workspace_binaries
      - run: mkdir test-binary
      - run:
          name: Create new NPM package
          working_directory: test-binary
          command: npm init -y
      - run:
          name: Install Cypress
          working_directory: test-binary
          command: CYPRESS_INSTALL_BINARY=/root/cypress/cypress.zip npm install /root/cypress/cypress.tgz
      - run:
          name: Verify Cypress binary
          working_directory: test-binary
          command: $(npm bin)/cypress verify
      - run:
          name: Print Cypress version
          working_directory: test-binary
          command: $(npm bin)/cypress version
      - run:
          name: Cypress info
          working_directory: test-binary
          command: $(npm bin)/cypress info

  test-types-cypress-and-jest:
    parameters:
      executor:
        description: Executor name to use
        type: executor
        default: cy-doc
      wd:
        description: Working directory, should be OUTSIDE cypress monorepo folder
        type: string
        default: /root/test-cypress-and-jest
    <<: *defaults
    resource_class: small
    steps:
      - restore_workspace_binaries
      - run: mkdir <<parameters.wd>>
      - run:
          name: Create new NPM package ⚗️
          working_directory: <<parameters.wd>>
          command: npm init -y
      - run:
          name: Install dependencies 📦
          working_directory: <<parameters.wd>>
          environment:
            CYPRESS_INSTALL_BINARY: /root/cypress/cypress.zip
          # let's install Cypress, Jest and any other package that might conflict
          # https://github.com/cypress-io/cypress/issues/6690

          # Todo: Add `jest` back into the list once https://github.com/yargs/yargs-parser/issues/452
          # is resolved.
          command: |
            npm install /root/cypress/cypress.tgz \
              typescript @types/jest enzyme @types/enzyme
      - run:
          name: Test types clash ⚔️
          working_directory: <<parameters.wd>>
          command: |
            echo "console.log('hello world')" > hello.ts
            npx tsc hello.ts --noEmit

  test-full-typescript-project:
    parameters:
      executor:
        description: Executor name to use
        type: executor
        default: cy-doc
      wd:
        description: Working directory, should be OUTSIDE cypress monorepo folder
        type: string
        default: /root/test-full-typescript
    <<: *defaults
    resource_class: small
    steps:
      - restore_workspace_binaries
      - run: mkdir <<parameters.wd>>
      - run:
          name: Create new NPM package ⚗️
          working_directory: <<parameters.wd>>
          command: npm init -y
      - run:
          name: Install dependencies 📦
          working_directory: <<parameters.wd>>
          environment:
            CYPRESS_INSTALL_BINARY: /root/cypress/cypress.zip
          command: |
            npm install /root/cypress/cypress.tgz typescript
      - run:
          name: Scaffold full TypeScript project 🏗
          working_directory: <<parameters.wd>>
          command: npx @bahmutov/cly@1.9.0 init --typescript
      - run:
          name: Run project tests 🗳
          working_directory: <<parameters.wd>>
          command: npx cypress run

  # install NPM + binary zip and run against staging API
  test-binary-against-staging:
    <<: *defaults
    steps:
      - restore_workspace_binaries
      - clone-repo-and-checkout-branch:
          repo: cypress-test-tiny
      - run:
          name: Install Cypress
          working_directory: /tmp/cypress-test-tiny
          # force installing the freshly built binary
          command: CYPRESS_INSTALL_BINARY=~/cypress/cypress.zip npm i --legacy-peer-deps ~/cypress/cypress.tgz
      - run:
          name: Run test project
          working_directory: /tmp/cypress-test-tiny
          command: |
            CYPRESS_PROJECT_ID=$TEST_TINY_PROJECT_ID \
            CYPRESS_RECORD_KEY=$TEST_TINY_RECORD_KEY \
            CYPRESS_INTERNAL_ENV=staging \
            $(yarn bin cypress) run --record
      - store-npm-logs

  test-binary-against-recipes-firefox:
    <<: *defaults
    steps:
      - test-binary-against-repo:
          repo: cypress-example-recipes
          command: npm run test:ci:firefox

  test-binary-against-recipes-chrome:
    <<: *defaults
    steps:
      - test-binary-against-repo:
          repo: cypress-example-recipes
          command: npm run test:ci:chrome

  test-binary-against-recipes:
    <<: *defaults
    steps:
      - test-binary-against-repo:
          repo: cypress-example-recipes
          command: npm run test:ci

  # This is a special job. It allows you to test the current
  # built test runner against a pull request in the repo
  # cypress-example-recipes.
  # Imagine you are working on a feature and want to show / test a recipe
  # You would need to run the built test runner before release
  # against a PR that cannot be merged until the new version
  # of the test runner is released.
  # Use:
  #   specify pull request number
  #   and the recipe folder

  # test-binary-against-recipe-pull-request:
  #   <<: *defaults
  #   steps:
  #     # test a specific pull request by number from cypress-example-recipes
  #     - test-binary-against-repo:
  #         repo: cypress-example-recipes
  #         command: npm run test:ci
  #         pull_request_id: 515
  #         folder: examples/fundamentals__typescript

  test-binary-against-kitchensink:
    <<: *defaults
    steps:
      - test-binary-against-repo:
          repo: cypress-example-kitchensink
          browser: "electron"

  test-binary-against-kitchensink-firefox:
    <<: *defaults
    steps:
      - test-binary-against-repo:
          repo: cypress-example-kitchensink
          browser: firefox

  test-binary-against-kitchensink-chrome:
    <<: *defaults
    steps:
      - test-binary-against-repo:
          repo: cypress-example-kitchensink
          browser: chrome

  test-binary-against-todomvc-firefox:
    <<: *defaults
    steps:
      - test-binary-against-repo:
          repo: cypress-example-todomvc
          browser: firefox

  test-binary-against-conduit-chrome:
    <<: *defaults
    steps:
      - test-binary-against-repo:
          repo: cypress-example-conduit-app
          browser: chrome
          command: "npm run cypress:run"
          wait-on: http://localhost:3000

  test-binary-against-api-testing-firefox:
    <<: *defaults
    steps:
      - test-binary-against-repo:
          repo: cypress-example-api-testing
          browser: firefox
          command: "npm run cy:run"

  test-binary-against-piechopper-firefox:
    <<: *defaults
    steps:
      - test-binary-against-repo:
          repo: cypress-example-piechopper
          browser: firefox
          command: "npm run cypress:run"

  test-binary-against-cypress-realworld-app:
    <<: *defaults
    resource_class: medium+
    steps:
      - test-binary-against-rwa:
          repo: cypress-realworld-app
          browser: chrome
          wait-on: http://localhost:3000

  test-binary-as-specific-user:
    <<: *defaults
    steps:
      - restore_workspace_binaries
      # the user should be "node"
      - run: whoami
      - run: pwd
      # prints the current user's effective user id
      # for root it is 0
      # for other users it is a positive integer
      - run: node -e 'console.log(process.geteuid())'
      # make sure the binary and NPM package files are present
      - run: ls -l
      - run: ls -l cypress.zip cypress.tgz
      - run: mkdir test-binary
      - run:
          name: Create new NPM package
          working_directory: test-binary
          command: npm init -y
      - run:
          # install NPM from built NPM package folder
          name: Install Cypress
          working_directory: test-binary
          # force installing the freshly built binary
          command: CYPRESS_INSTALL_BINARY=~/cypress/cypress.zip npm i ~/cypress/cypress.tgz
      - run:
          name: Cypress help
          working_directory: test-binary
          command: $(yarn bin cypress) help
      - run:
          name: Cypress info
          working_directory: test-binary
          command: $(yarn bin cypress) info
      - run:
          name: Add Cypress demo
          working_directory: test-binary
          command: npx @bahmutov/cly@1.9.0 init
      - run:
          name: Verify Cypress binary
          working_directory: test-binary
          command: DEBUG=cypress:cli $(yarn bin cypress) verify
      - run:
          name: Run Cypress binary
          working_directory: test-binary
          command: DEBUG=cypress:cli $(yarn bin cypress) run
      - store-npm-logs
